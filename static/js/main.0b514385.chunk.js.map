{"version":3,"sources":["Calculator.js","components/Screen.js","components/EvalHistory.js","App.js","index.js"],"names":["Calculator","state","expression","undefined","show_prev_expression","leading_zero","end_with_operator","decimal_point","window","sessionStorage","history_size","document","body","addEventListener","e","keyboard_event_handler","key","console","log","this","appendOperator","getAnswer","removeCharacter","appendDot","isNaN","Number","appendNumber","number","setState","String","slice","length","operator","left_operand","new_answer","eval","toExponential","error","new_expression","last_character","temp","now_last","className","callback","setExpression","onClick","clearExpression","React","Component","Screen","latest_answer","prev_expression","now_expression","EvalHistory","toggle_idx","totalHistory","i","push","answer","toggleHistory","style","display","map","eval_history","idx","props","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0b514385.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Screen from \"./components/Screen\";\r\nimport EvalHistory from \"./components/EvalHistory\";\r\n\r\nimport \"./Calculator.css\";\r\nclass Calculator extends React.Component{\r\n    state = {\r\n        expression:undefined,\r\n        show_prev_expression:false, \r\n        leading_zero:false,\r\n        end_with_operator:false, \r\n        decimal_point:false\r\n    }\r\n    \r\n    componentDidMount(){\r\n        window.sessionStorage.history_size = 0;\r\n        document.body.addEventListener('keydown', (e) => this.keyboard_event_handler(e))\r\n    }\r\n\r\n    keyboard_event_handler(e){\r\n        const key = e.key;\r\n        console.log(key);\r\n        if(key===\"+\"||key===\"-\"||key===\"/\"||key===\"*\"||key===\"%\"){\r\n            this.appendOperator(key);\r\n        }else if(key===\"Enter\"||key===\"=\"){\r\n            this.getAnswer();\r\n        }else if(key===\"Backspace\"){\r\n            this.removeCharacter();\r\n        }else if(key===\".\"){\r\n            this.appendDot();\r\n        }else if(!isNaN(Number(key))){\r\n            this.appendNumber(key);\r\n        }\r\n    }\r\n\r\n    appendNumber(number){\r\n        const {expression, leading_zero, end_with_operator, decimal_point} = this.state;\r\n        \r\n        if(expression===undefined){\r\n            this.setState({\r\n                            expression:String(number), \r\n                            show_prev_expression:false, \r\n                            leading_zero:(number===0),\r\n                            end_with_operator:false,\r\n                            decimal_point:false\r\n                        });\r\n        }else if(leading_zero){\r\n            this.setState({\r\n                            expression:expression.slice(0, expression.length-1)+number, \r\n                            show_prev_expression:false, \r\n                            leading_zero:(number===0),\r\n                            end_with_operator:false, \r\n                            decimal_point:decimal_point\r\n                        });\r\n        }else if(end_with_operator){\r\n            this.setState({\r\n                            expression:expression+number, \r\n                            show_prev_expression:false, \r\n                            leading_zero:(number===0), \r\n                            end_with_operator:false, \r\n                            decimal_point:false\r\n                        });\r\n        }else if(decimal_point){\r\n            this.setState({\r\n                            expression:expression+number, \r\n                            show_prev_expression:false, \r\n                            leading_zero:false, \r\n                            end_with_operator:false, \r\n                            decimal_point:decimal_point\r\n                        });\r\n        }else{\r\n            this.setState({\r\n                            expression:expression+number, \r\n                            show_prev_expression:false, \r\n                            leading_zero:false, \r\n                            end_with_operator:false, \r\n                            decimal_point:decimal_point\r\n                        });\r\n        }\r\n    }\r\n\r\n    appendOperator(operator){\r\n        const {expression, end_with_operator} = this.state;\r\n\r\n        if(expression===undefined){\r\n            if(operator===\"-\"){\r\n                this.setState({\r\n                                expression:operator,\r\n                                show_prev_expression:false,\r\n                                leading_zero:false,\r\n                                end_with_operator:true,\r\n                                decimal_point:false\r\n                            })\r\n            }else{\r\n                const history_size = Number(window.sessionStorage.history_size);\r\n                const left_operand = history_size===0?\"0\":(window.sessionStorage[\"answer_\"+history_size]===\"Error\"?\"0\":window.sessionStorage[\"answer_\"+history_size]);\r\n                this.setState({\r\n                                expression:left_operand+operator, \r\n                                show_prev_expression:false, \r\n                                leading_zero:false, \r\n                                end_with_operator:true, \r\n                                decimal_point:false\r\n                            });         \r\n            } \r\n        }else if(expression!==\"-\"){\r\n            if(end_with_operator){\r\n                this.setState({\r\n                                expression:expression.slice(0, expression.length-1)+operator, \r\n                                show_prev_expression:false, \r\n                                leading_zero:false, \r\n                                end_with_operator:true,\r\n                                decimal_point:false\r\n                            });\r\n            }else{\r\n                this.setState({\r\n                                expression:expression+operator, \r\n                                show_prev_expression:false, \r\n                                leading_zero:false, \r\n                                end_with_operator:true,\r\n                                decimal_point:false\r\n                            });\r\n            }\r\n        }\r\n    }\r\n\r\n    appendDot(){\r\n        const {expression, end_with_operator, decimal_point} = this.state;\r\n        if(expression===undefined){\r\n            this.setState({\r\n                            expression:\"0.\", \r\n                            show_prev_expression:false, \r\n                            leading_zero:false, \r\n                            end_with_operator:false,\r\n                            decimal_point:true\r\n                        });\r\n        }else if(end_with_operator){\r\n            this.setState({\r\n                            expression:expression+\"0.\", \r\n                            show_prev_expression:false, \r\n                            leading_zero:false, \r\n                            end_with_operator:false,\r\n                            decimal_point:true\r\n                        });\r\n        }else if(!decimal_point){\r\n            this.setState({\r\n                            expression:expression+\".\", \r\n                            show_prev_expression:false, \r\n                            leading_zero:false, \r\n                            end_with_operator:false,\r\n                            decimal_point:true\r\n                        });\r\n        }\r\n    }\r\n\r\n    getAnswer(){\r\n        const {expression, end_with_operator} = this.state;\r\n        if(!end_with_operator){\r\n            let new_answer = undefined;\r\n            try {\r\n                new_answer = String(eval(expression));\r\n                if(new_answer.length > 12){\r\n                    new_answer = String(Number(new_answer).toExponential());\r\n                }\r\n            } catch (error) {\r\n                new_answer = \"Error\";\r\n            }\r\n            \r\n            const history_size = Number(window.sessionStorage.history_size);\r\n            window.sessionStorage.history_size = history_size+1;\r\n            window.sessionStorage[\"expression_\"+(history_size+1)] = expression;\r\n            window.sessionStorage[\"answer_\"+(history_size+1)] = new_answer;\r\n            this.setState({\r\n                            expression:undefined, \r\n                            show_prev_expression:true, \r\n                            leading_zero:false,\r\n                            end_with_operator:false,\r\n                            decimal_point:false\r\n                        });\r\n        }\r\n    }\r\n\r\n    clearExpression(){\r\n        this.setState({\r\n                        expression:undefined, \r\n                        show_prev_expression:false, \r\n                        leading_zero:false,\r\n                        end_with_operator:false,\r\n                        decimal_point:false\r\n                    });\r\n    }\r\n\r\n    removeCharacter(){\r\n        const {expression} = this.state;\r\n\r\n        if(expression!==undefined){\r\n            const new_expression = expression.slice(0, expression.length-1);\r\n            \r\n            if(new_expression.length===0){\r\n                this.setState({\r\n                                expression:undefined, \r\n                                show_prev_expression:false, \r\n                                leading_zero:false,\r\n                                end_with_operator:false,\r\n                                decimal_point:false\r\n                            });\r\n            }else{\r\n                const last_character = new_expression.slice(-1);\r\n                const end_with_operator = (last_character===\"+\"||last_character===\"-\"||last_character===\"/\"||last_character===\"*\"||last_character===\"%\");\r\n                let leading_zero = true;\r\n                let decimal_point = false;\r\n                if(!end_with_operator){\r\n                    let temp = new_expression;\r\n                    while(temp.length!==0){\r\n                        const now_last = temp.slice(-1);\r\n                        if(now_last===\"+\"||now_last===\"-\"||now_last===\"/\"||now_last===\"*\"||now_last===\"%\"){\r\n                            break;\r\n                        }\r\n                        if(now_last===\".\"){\r\n                            leading_zero = false;\r\n                            decimal_point = true;\r\n                            break;\r\n                        }\r\n                        if(Number(now_last)!==0){\r\n                            leading_zero = false;\r\n                        }\r\n                        temp = temp.slice(0, temp.length-1);\r\n                    }\r\n                }\r\n                this.setState({\r\n                                expression:new_expression, \r\n                                show_prev_expression:false, \r\n                                leading_zero:leading_zero&&!end_with_operator,\r\n                                end_with_operator:end_with_operator,\r\n                                decimal_point:decimal_point\r\n                            });\r\n            }\r\n        }\r\n    }\r\n\r\n    setExpression(expression){ \r\n        let leading_zero = true;\r\n        let decimal_point = false;\r\n        \r\n        let temp = expression;\r\n        while(temp.length!==0){\r\n            const now_last = temp.slice(-1);\r\n            if(now_last===\"+\"||now_last===\"-\"||now_last===\"/\"||now_last===\"*\"||now_last===\"%\"){\r\n                break;\r\n            }\r\n            if(now_last===\".\"){\r\n                leading_zero = false;\r\n                decimal_point = true;\r\n                break;\r\n            }\r\n            if(Number(now_last)!==0){\r\n                leading_zero = false;\r\n            }\r\n            temp = temp.slice(0, temp.length-1);\r\n        }\r\n                    \r\n        this.setState({\r\n                        expression:expression, \r\n                        show_prev_expression:false, \r\n                        leading_zero:leading_zero,\r\n                        end_with_operator:false,\r\n                        decimal_point:decimal_point\r\n                    });\r\n    }\r\n\r\n    render(){\r\n        const {expression, show_prev_expression} = this.state;\r\n        return (\r\n            <section className=\"container\">\r\n                <EvalHistory callback={(expression) => this.setExpression(expression)}/>\r\n                <Screen expression={expression} show_prev_expression={show_prev_expression}/>\r\n                <div className=\"button_container\">\r\n                    <button className=\"middle_button\" onClick={() => this.clearExpression()}>AC</button>\r\n                    <button className=\"middle_button\" onClick={() => this.removeCharacter()}>CE</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendOperator(\"%\")}>%</button>\r\n\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(7)}>7</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(8)}>8</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(9)}>9</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendOperator(\"/\")}>/</button>\r\n                    \r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(4)}>4</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(5)}>5</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(6)}>6</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendOperator(\"*\")}>*</button>\r\n                    \r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(1)}>1</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(2)}>2</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(3)}>3</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendOperator(\"-\")}>-</button>\r\n                    \r\n                    <button className=\"small_button\" onClick={() => this.appendDot()}>.</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendNumber(0)}>0</button>\r\n                    <button className=\"small_button\" onClick={() => this.getAnswer()}>=</button>\r\n                    <button className=\"small_button\" onClick={() => this.appendOperator(\"+\")}>+</button>\r\n                    \r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from \"react\";\r\n\r\nimport \"./Screen.css\";\r\n\r\nfunction Screen({expression, show_prev_expression}){\r\n    const history_size = Number(window.sessionStorage.history_size);\r\n    const latest_answer = (history_size===0||isNaN(history_size))?null:window.sessionStorage[\"answer_\"+history_size];\r\n    const prev_expression = (history_size===0||isNaN(history_size))?null:(show_prev_expression?(window.sessionStorage[\"expression_\"+history_size] + \" = \"):(\"Ans = \"+latest_answer));\r\n    \r\n    const now_expression =show_prev_expression?latest_answer:(expression===undefined?\"0\":expression);\r\n    return (\r\n        <div className=\"screen\">\r\n            <span className=\"prev_expression\">{prev_expression}</span>\r\n            <span className=\"now_expression\">{now_expression}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Screen;","import React from \"react\";\r\n\r\nimport \"./EvalHistory.css\";\r\nclass EvalHistory extends React.Component {\r\n    state = {\r\n        toggle_idx:0\r\n    }\r\n\r\n    toggleHistory(){\r\n        const {toggle_idx} = this.state;\r\n        this.setState({toggle_idx:(toggle_idx+1)%2});\r\n    }\r\n\r\n    render() {\r\n        let totalHistory = [];\r\n        const visibility = [\"none\", \"block\"];\r\n        const {toggle_idx} = this.state; \r\n        const history_size = Number(window.sessionStorage.history_size);\r\n\r\n        for (let i = 1; i <= history_size; i += 1) {\r\n            totalHistory.push({\r\n                expression: window.sessionStorage[\"expression_\" + i],\r\n                answer: window.sessionStorage[\"answer_\" + i],\r\n            });\r\n        }\r\n        \r\n        return (\r\n            <section className=\"history_container\">\r\n                <button className=\"history__button\" onClick={() => this.toggleHistory()}>HISTORY</button>\r\n                <ul className=\"histories\" style={{display: visibility[toggle_idx]}}>        \r\n                    {totalHistory.map((eval_history, idx) => (\r\n                        <li className=\"histories__history\" key={idx}>\r\n                            <button className=\"expression_button\" onClick={() => {this.toggleHistory(); this.props.callback(eval_history.expression)}}>{eval_history.expression.slice(0, 18)}...</button>\r\n                            <span className=\"expression_text\">=</span>\r\n                            <button className=\"expression_button\" onClick={() => {this.toggleHistory(); this.props.callback(eval_history.answer)}}>{eval_history.answer.slice(0, 18)}...</button></li>\r\n                    ))}\r\n                </ul>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EvalHistory;","import React from \"react\";\nimport Calculator from \"./Calculator\";\n\nimport \"./App.css\";\n\nfunction App() {\n    return <Calculator /> ;\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( < App / > ,\n    document.getElementById('root')\n);"],"sourceRoot":""}